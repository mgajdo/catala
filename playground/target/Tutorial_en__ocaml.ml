(** This file has been generated by the Catala compiler, do not edit! *)

open Runtime_ocaml.Runtime

[@@@ocaml.warning "-4-26-27-32-41-42"]

module TaxCredit = struct
 type t =
    | NoTaxCredit of unit
    | ChildrenTaxCredit of integer
  end

module Individual = struct
  type t = {income: money; number_of_children: integer}
end

module IncomeTaxComputation = struct
  type t = {income_tax: money}
end

module Child = struct
  type t = {is_eligible_article_3: bool}
end

module TwoBrackets = struct
  type t = {breakpoint: money; rate1: decimal; rate2: decimal}
end

module TwoBracketsTaxComputation = struct
  type t = {tax_formula: money -> money}
end

module NewIncomeTaxComputation = struct
  type t = {income_tax: money}
end

module Test1 = struct
  type t = {income_tax: money}
end

module Test2 = struct
  type t = {income_tax: money}
end

module NewIncomeTaxComputationFixed = struct
  type t = {tax_formula: money -> money; income_tax: money}
end

module Test3 = struct
  type t = {income_tax: money}
end

module Test4 = struct
  type t = {income_tax: money}
end

module Test5 = struct
  type t = {income_tax: money}
end

module BasisForFineDetermination = struct
  type t = {basis_for_fine: money}
end

module BooleanValues = struct
  type t = {value1: bool; value2: bool}
end

module IntegerValues = struct
  type t = {value1: integer; value2: integer}
end

module DecimalValues = struct
  type t = {value1: decimal; value2: decimal}
end

module MoneyValues = struct
  type t = {value1: decimal; value2: money}
end

module DateValues = struct
  type t = {value1: date; value2: duration}
end

module AmbiguousDate = struct
  type t = {result: date}
end

module AmbiguousDate2 = struct
  type t = {result: date}
end

module AmbiguousDate3 = struct
  type t = {result: bool}
end

module ListValues = struct
  type t = {
    more_values: integer array;
    total: integer;
    average: decimal;
    positive_values: integer array;
    relative_values: decimal array
  }
end

module UseOfTuple = struct
  type t = {when1: date}
end

module ApplyRates = struct
  type t = {result: money array}
end

module IncludeInGrossIncome = struct
  type t = {amount_to_include: money}
end

module Test4bis = struct
  type t = {tax_computation: NewIncomeTaxComputationFixed.t}
end

module IncomeTaxComputation_in = struct
  type t = {individual_in: Individual.t}
end

module Child_in = struct
  type t = {age_in: integer}
end

module TwoBracketsTaxComputation_in = struct
  type t = {brackets_in: TwoBrackets.t}
end

module NewIncomeTaxComputation_in = struct
  type t = {individual_in: Individual.t}
end

module Test1_in = struct
  type t = unit
end

module Test2_in = struct
  type t = unit
end

module NewIncomeTaxComputationFixed_in = struct
  type t = {
    individual_in: Individual.t;
    income_tax_in: unit -> (money) Eoption.t
  }
end

module Test3_in = struct
  type t = unit
end

module Test4_in = struct
  type t = unit
end

module Test5_in = struct
  type t = unit
end

module Test4bis_in = struct
  type t = unit
end

module BasisForFineDetermination_in = struct
  type t = {individual_in: Individual.t}
end

module WealthTax_in = struct
  type t = {
    value_of_buildings_used_for_charity_in: money;
    total_wealth_in: money
  }
end

module WealthTax = struct
  type t = unit
end

module BooleanValues_in = struct
  type t = unit
end

module IntegerValues_in = struct
  type t = unit
end

module DecimalValues_in = struct
  type t = unit
end

module MoneyValues_in = struct
  type t = unit
end

module DateValues_in = struct
  type t = unit
end

module AmbiguousDate_in = struct
  type t = unit
end

module AmbiguousDate2_in = struct
  type t = unit
end

module AmbiguousDate3_in = struct
  type t = unit
end

module ListValues_in = struct
  type t = unit
end

module UseOfTuple_in = struct
  type t = unit
end

module ApplyRates_in = struct
  type t = {values_in: money array; rates_in: decimal array}
end

module IncludeInGrossIncome_in = struct
  type t = {fair_market_value_in: money; amount_paid_in: money}
end


let income_tax_computation (income_tax_computation_in: IncomeTaxComputation_in.t) : IncomeTaxComputation.t =
  let individual: Individual.t =
    income_tax_computation_in.IncomeTaxComputation_in.individual_in in
  let fixed_percentage: decimal =
    match
      (handle_exceptions
         [|{filename="examples/test/Tutorial_en.catala_en";
            start_line=142; start_column=12; end_line=142; end_column=28;
            law_headings=["Defining a fictional income tax";
                           "The Catala language tutorial"]}|]
         ([|(Eoption.ESome (decimal_of_string "0.2"));
            ( if
               (o_gte_int_int (individual.Individual.number_of_children)
                  (integer_of_string "2")) then
               (Eoption.ESome (decimal_of_string "0.15")) else
               (Eoption.ENone ()))|]))
    with
    | Eoption.ENone _ -> (raise
        (Runtime_ocaml.Runtime.Error (NoValue, [{filename="examples/test/Tutorial_en.catala_en";
                                                 start_line=142; start_column=12;
                                                 end_line=142; end_column=28;
                                                 law_headings=["Defining a fictional income tax";
                                                                "The Catala language tutorial"]}])))
    | Eoption.ESome arg -> arg in
  let income_tax: money =
    match
      (Eoption.ESome
         (o_mult_mon_rat (individual.Individual.income) fixed_percentage))
    with
    | Eoption.ENone _ -> (raise
        (Runtime_ocaml.Runtime.Error (NoValue, [{filename="examples/test/Tutorial_en.catala_en";
                                                 start_line=143; start_column=10;
                                                 end_line=143; end_column=20;
                                                 law_headings=["Defining a fictional income tax";
                                                                "The Catala language tutorial"]}])))
    | Eoption.ESome arg -> arg in
  {IncomeTaxComputation.income_tax = income_tax}

let child (child_in: Child_in.t) : Child.t =
  let age: integer = child_in.Child_in.age_in in
  let is_eligible_article_3: bool =
    match
      (match
         ( if (o_lt_int_int age (integer_of_string "18")) then
            (Eoption.ESome true) else (Eoption.ENone ()))
       with
       | Eoption.ENone _ -> (Eoption.ESome false)
       | Eoption.ESome x -> (Eoption.ESome x))
    with
    | Eoption.ENone _ -> (raise
        (Runtime_ocaml.Runtime.Error (NoValue, [{filename="examples/test/Tutorial_en.catala_en";
                                                 start_line=265; start_column=10;
                                                 end_line=265; end_column=31;
                                                 law_headings=["Article 3 bis";
                                                                "Rules";
                                                                "The Catala language tutorial"]}])))
    | Eoption.ESome arg -> arg in
  {Child.is_eligible_article_3 = is_eligible_article_3}

let two_brackets_tax_computation (two_brackets_tax_computation_in: TwoBracketsTaxComputation_in.t) : TwoBracketsTaxComputation.t =
  let brackets: TwoBrackets.t =
    two_brackets_tax_computation_in.TwoBracketsTaxComputation_in.brackets_in in
  let tax_formula: money -> money =
    fun (income: money) ->
      match
        (Eoption.ESome
           ( if (o_lte_mon_mon income (brackets.TwoBrackets.breakpoint)) then
              (o_mult_mon_rat income (brackets.TwoBrackets.rate1)) else
              (o_add_mon_mon
                 (o_mult_mon_rat (brackets.TwoBrackets.breakpoint)
                    (brackets.TwoBrackets.rate1))
                 (o_mult_mon_rat
                    (o_sub_mon_mon income (brackets.TwoBrackets.breakpoint))
                    (brackets.TwoBrackets.rate2)))))
      with
      | Eoption.ENone _ -> (raise
          (Runtime_ocaml.Runtime.Error (NoValue, [{filename="examples/test/Tutorial_en.catala_en";
                                                   start_line=299; start_column=10;
                                                   end_line=299; end_column=21;
                                                   law_headings=["Functions";
                                                                  "The Catala language tutorial"]}])))
      | Eoption.ESome arg -> arg in
  {TwoBracketsTaxComputation.tax_formula = tax_formula}

let wealth_tax (wealth_tax_in: WealthTax_in.t) : WealthTax.t =
  let value_of_buildings_used_for_charity: money =
    wealth_tax_in.WealthTax_in.value_of_buildings_used_for_charity_in in
  let total_wealth: money = wealth_tax_in.WealthTax_in.total_wealth_in in
  let wealth_total: money =
    match (Eoption.ESome total_wealth)
    with
    | Eoption.ENone _ -> (raise
        (Runtime_ocaml.Runtime.Error (NoValue, [{filename="examples/test/Tutorial_en.catala_en";
                                                 start_line=803; start_column=12;
                                                 end_line=803; end_column=18;
                                                 law_headings=["Article 8";
                                                                "One variable, multiple states";
                                                                "The Catala language tutorial"]}])))
    | Eoption.ESome arg -> arg in
  let wealth_after_charity_deductions: money =
    match
      (Eoption.ESome
         (o_sub_mon_mon wealth_total value_of_buildings_used_for_charity))
    with
    | Eoption.ENone _ -> (raise
        (Runtime_ocaml.Runtime.Error (NoValue, [{filename="examples/test/Tutorial_en.catala_en";
                                                 start_line=803; start_column=12;
                                                 end_line=803; end_column=18;
                                                 law_headings=["Article 8";
                                                                "One variable, multiple states";
                                                                "The Catala language tutorial"]}])))
    | Eoption.ESome arg -> arg in
  let wealth_after_capping: money =
    match
      (Eoption.ESome
         ( if
            (o_gte_mon_mon wealth_after_charity_deductions
               (money_of_cents_string "250000000")) then
            (money_of_cents_string "250000000") else
            wealth_after_charity_deductions))
    with
    | Eoption.ENone _ -> (raise
        (Runtime_ocaml.Runtime.Error (NoValue, [{filename="examples/test/Tutorial_en.catala_en";
                                                 start_line=803; start_column=12;
                                                 end_line=803; end_column=18;
                                                 law_headings=["Article 8";
                                                                "One variable, multiple states";
                                                                "The Catala language tutorial"]}])))
    | Eoption.ESome arg -> arg in
  let _: unit =
    if (o_gt_mon_mon wealth_after_capping (money_of_cents_string "0")) then
      () else
      raise (Error (AssertionFailed, [{filename="examples/test/Tutorial_en.catala_en";
                                       start_line=820; start_column=13;
                                       end_line=820; end_column=24;
                                       law_headings=["Article 8";
                                                      "One variable, multiple states";
                                                      "The Catala language tutorial"]}]))
    in
  ()

let boolean_values (boolean_values_in: BooleanValues_in.t) : BooleanValues.t =
  let value1: bool =
    match
      (match
         ( if (o_and false true) then (Eoption.ESome true) else
            (Eoption.ENone ()))
       with
       | Eoption.ENone _ -> (Eoption.ESome false)
       | Eoption.ESome x -> (Eoption.ESome x))
    with
    | Eoption.ENone _ -> (raise
        (Runtime_ocaml.Runtime.Error (NoValue, [{filename="examples/test/Tutorial_en.catala_en";
                                                 start_line=855; start_column=10;
                                                 end_line=855; end_column=16;
                                                 law_headings=["Booleans";
                                                                "Catala values";
                                                                "The Catala language tutorial"]}])))
    | Eoption.ESome arg -> arg in
  let value2: bool =
    match (Eoption.ESome (o_xor value1 (o_eq (o_and value1 true) false)))
    with
    | Eoption.ENone _ -> (raise
        (Runtime_ocaml.Runtime.Error (NoValue, [{filename="examples/test/Tutorial_en.catala_en";
                                                 start_line=856; start_column=10;
                                                 end_line=856; end_column=16;
                                                 law_headings=["Booleans";
                                                                "Catala values";
                                                                "The Catala language tutorial"]}])))
    | Eoption.ESome arg -> arg in
  {BooleanValues.value1 = value1; BooleanValues.value2 = value2}

let integer_values (integer_values_in: IntegerValues_in.t) : IntegerValues.t =
  let value1: integer =
    match
      ( if
         (o_lt_int_int
            (o_sub_int_int (integer_of_string "12")
               (o_mult_int_int (integer_of_string "5") (integer_of_string
                  "3"))) (integer_of_string "65")) then
         (Eoption.ESome
            (o_mult_int_int (integer_of_string "45") (integer_of_string "9")))
         else (Eoption.ENone ()))
    with
    | Eoption.ENone _ -> (raise
        (Runtime_ocaml.Runtime.Error (NoValue, [{filename="examples/test/Tutorial_en.catala_en";
                                                 start_line=874; start_column=10;
                                                 end_line=874; end_column=16;
                                                 law_headings=["Integers";
                                                                "Catala values";
                                                                "The Catala language tutorial"]}])))
    | Eoption.ESome arg -> arg in
  let value2: integer =
    match
      (Eoption.ESome
         (o_mult_int_int
            (o_mult_int_int (o_mult_int_int value1 value1) (integer_of_string
               "65")) (integer_of_string "100")))
    with
    | Eoption.ENone _ -> (raise
        (Runtime_ocaml.Runtime.Error (NoValue, [{filename="examples/test/Tutorial_en.catala_en";
                                                 start_line=875; start_column=10;
                                                 end_line=875; end_column=16;
                                                 law_headings=["Integers";
                                                                "Catala values";
                                                                "The Catala language tutorial"]}])))
    | Eoption.ESome arg -> arg in
  {IntegerValues.value1 = value1; IntegerValues.value2 = value2}

let decimal_values (decimal_values_in: DecimalValues_in.t) : DecimalValues.t =
  let value1: decimal =
    match
      ( if
         (o_lt_rat_rat
            (o_sub_rat_rat (decimal_of_string "12.655465446655426")
               (decimal_of_string "0.45265426541654"))
            (decimal_of_string "12.3554654652")) then
         (Eoption.ESome
            (o_div_int_int
               {filename="examples/test/Tutorial_en.catala_en";
                start_line=896; start_column=15; end_line=896; end_column=16;
                law_headings=["Decimals"; "Catala values";
                               "The Catala language tutorial"]}
               (integer_of_string "45") (integer_of_string "8"))) else
         (Eoption.ENone ()))
    with
    | Eoption.ENone _ -> (raise
        (Runtime_ocaml.Runtime.Error (NoValue, [{filename="examples/test/Tutorial_en.catala_en";
                                                 start_line=890; start_column=10;
                                                 end_line=890; end_column=16;
                                                 law_headings=["Decimals";
                                                                "Catala values";
                                                                "The Catala language tutorial"]}])))
    | Eoption.ESome arg -> arg in
  let value2: decimal =
    match
      (Eoption.ESome
         (o_mult_rat_rat (o_mult_rat_rat value1 value1)
            (decimal_of_string "0.65")))
    with
    | Eoption.ENone _ -> (raise
        (Runtime_ocaml.Runtime.Error (NoValue, [{filename="examples/test/Tutorial_en.catala_en";
                                                 start_line=891; start_column=10;
                                                 end_line=891; end_column=16;
                                                 law_headings=["Decimals";
                                                                "Catala values";
                                                                "The Catala language tutorial"]}])))
    | Eoption.ESome arg -> arg in
  {DecimalValues.value1 = value1; DecimalValues.value2 = value2}

let money_values (money_values_in: MoneyValues_in.t) : MoneyValues.t =
  let value1: decimal =
    match
      ( if
         (o_lt_rat_rat
            (o_sub_rat_rat (decimal_of_string "12.655465446655426")
               (decimal_of_string "0.45265426541654"))
            (decimal_of_string "12.3554654652")) then
         (Eoption.ESome
            (o_div_int_int
               {filename="examples/test/Tutorial_en.catala_en";
                start_line=921; start_column=15; end_line=921; end_column=16;
                law_headings=["Money"; "Catala values";
                               "The Catala language tutorial"]}
               (integer_of_string "45") (integer_of_string "8"))) else
         (Eoption.ENone ()))
    with
    | Eoption.ENone _ -> (raise
        (Runtime_ocaml.Runtime.Error (NoValue, [{filename="examples/test/Tutorial_en.catala_en";
                                                 start_line=915; start_column=10;
                                                 end_line=915; end_column=16;
                                                 law_headings=["Money";
                                                                "Catala values";
                                                                "The Catala language tutorial"]}])))
    | Eoption.ESome arg -> arg in
  let value2: money =
    match
      (Eoption.ESome
         (o_mult_mon_rat (money_of_cents_string "100")
            (o_div_mon_mon
               {filename="examples/test/Tutorial_en.catala_en";
                start_line=923; start_column=49; end_line=923; end_column=52;
                law_headings=["Money"; "Catala values";
                               "The Catala language tutorial"]}
               (o_mult_mon_rat
                  (o_sub_mon_mon (money_of_cents_string "652023")
                     (money_of_cents_string "32045")) value1)
               (money_of_cents_string "4500"))))
    with
    | Eoption.ENone _ -> (raise
        (Runtime_ocaml.Runtime.Error (NoValue, [{filename="examples/test/Tutorial_en.catala_en";
                                                 start_line=916; start_column=10;
                                                 end_line=916; end_column=16;
                                                 law_headings=["Money";
                                                                "Catala values";
                                                                "The Catala language tutorial"]}])))
    | Eoption.ESome arg -> arg in
  {MoneyValues.value1 = value1; MoneyValues.value2 = value2}

let date_values (date_values_in: DateValues_in.t) : DateValues.t =
  let value1: date =
    match
      (Eoption.ESome
         (o_add_dat_dur AbortOnRound (date_of_numbers (2000) (1) (1))
            (duration_of_numbers (1) (0) (0))))
    with
    | Eoption.ENone _ -> (raise
        (Runtime_ocaml.Runtime.Error (NoValue, [{filename="examples/test/Tutorial_en.catala_en";
                                                 start_line=944; start_column=10;
                                                 end_line=944; end_column=16;
                                                 law_headings=["Dates and durations";
                                                                "Catala values";
                                                                "The Catala language tutorial"]}])))
    | Eoption.ESome arg -> arg in
  let value2: duration =
    match
      (Eoption.ESome
         (o_add_dur_dur
            (o_sub_dat_dat value1 (date_of_numbers (1999) (12) (31)))
            (duration_of_numbers (0) (0) (45))))
    with
    | Eoption.ENone _ -> (raise
        (Runtime_ocaml.Runtime.Error (NoValue, [{filename="examples/test/Tutorial_en.catala_en";
                                                 start_line=945; start_column=10;
                                                 end_line=945; end_column=16;
                                                 law_headings=["Dates and durations";
                                                                "Catala values";
                                                                "The Catala language tutorial"]}])))
    | Eoption.ESome arg -> arg in
  {DateValues.value1 = value1; DateValues.value2 = value2}

let ambiguous_date (ambiguous_date_in: AmbiguousDate_in.t) : AmbiguousDate.t =
  let result: date =
    match
      (Eoption.ESome
         (o_add_dat_dur AbortOnRound (date_of_numbers (2000) (2) (29))
            (duration_of_numbers (1) (0) (0))))
    with
    | Eoption.ENone _ -> (raise
        (Runtime_ocaml.Runtime.Error (NoValue, [{filename="examples/test/Tutorial_en.catala_en";
                                                 start_line=959; start_column=10;
                                                 end_line=959; end_column=16;
                                                 law_headings=["Ambiguities";
                                                                "Dates and durations";
                                                                "Catala values";
                                                                "The Catala language tutorial"]}])))
    | Eoption.ESome arg -> arg in
  {AmbiguousDate.result = result}

let ambiguous_date2 (ambiguous_date2_in: AmbiguousDate2_in.t) : AmbiguousDate2.t =
  let result: date =
    match
      (Eoption.ESome
         (o_add_dat_dur RoundDown (date_of_numbers (2000) (2) (29))
            (duration_of_numbers (1) (0) (0))))
    with
    | Eoption.ENone _ -> (raise
        (Runtime_ocaml.Runtime.Error (NoValue, [{filename="examples/test/Tutorial_en.catala_en";
                                                 start_line=981; start_column=10;
                                                 end_line=981; end_column=16;
                                                 law_headings=["Ambiguities";
                                                                "Dates and durations";
                                                                "Catala values";
                                                                "The Catala language tutorial"]}])))
    | Eoption.ESome arg -> arg in
  {AmbiguousDate2.result = result}

let ambiguous_date3 (ambiguous_date3_in: AmbiguousDate3_in.t) : AmbiguousDate3.t =
  let result: bool =
    match
      (Eoption.ESome
         (o_lt_dur_dur
            {filename="examples/test/Tutorial_en.catala_en";
             start_line=1003; start_column=35; end_line=1003; end_column=36;
             law_headings=["Ambiguities"; "Dates and durations";
                            "Catala values"; "The Catala language tutorial"]}
            (duration_of_numbers (0) (0) (30))
            (duration_of_numbers (0) (1) (0))))
    with
    | Eoption.ENone _ -> (raise
        (Runtime_ocaml.Runtime.Error (NoValue, [{filename="examples/test/Tutorial_en.catala_en";
                                                 start_line=1000; start_column=10;
                                                 end_line=1000; end_column=16;
                                                 law_headings=["Ambiguities";
                                                                "Dates and durations";
                                                                "Catala values";
                                                                "The Catala language tutorial"]}])))
    | Eoption.ESome arg -> arg in
  {AmbiguousDate3.result = result}

let list_values (list_values_in: ListValues_in.t) : ListValues.t =
  let values: integer array =
    match
      (Eoption.ESome
         ([|(integer_of_string "45"); (integer_of_string "-6");
            (integer_of_string "3"); (integer_of_string "4");
            (integer_of_string "0"); (integer_of_string "2155")|]))
    with
    | Eoption.ENone _ -> (raise
        (Runtime_ocaml.Runtime.Error (NoValue, [{filename="examples/test/Tutorial_en.catala_en";
                                                 start_line=1034; start_column=12;
                                                 end_line=1034; end_column=18;
                                                 law_headings=["Lists";
                                                                "Catala values";
                                                                "The Catala language tutorial"]}])))
    | Eoption.ESome arg -> arg in
  let positive_values: integer array =
    match
      (Eoption.ESome
         (o_filter
            (fun (x: integer) -> o_gte_int_int x (integer_of_string "0"))
            values))
    with
    | Eoption.ENone _ -> (raise
        (Runtime_ocaml.Runtime.Error (NoValue, [{filename="examples/test/Tutorial_en.catala_en";
                                                 start_line=1038; start_column=10;
                                                 end_line=1038; end_column=25;
                                                 law_headings=["Lists";
                                                                "Catala values";
                                                                "The Catala language tutorial"]}])))
    | Eoption.ESome arg -> arg in
  let total: integer =
    match
      (Eoption.ESome
         (o_reduce
            (fun (sum1: integer) (sum2: integer) -> o_add_int_int sum1 sum2)
            (integer_of_string "0") values))
    with
    | Eoption.ENone _ -> (raise
        (Runtime_ocaml.Runtime.Error (NoValue, [{filename="examples/test/Tutorial_en.catala_en";
                                                 start_line=1036; start_column=10;
                                                 end_line=1036; end_column=15;
                                                 law_headings=["Lists";
                                                                "Catala values";
                                                                "The Catala language tutorial"]}])))
    | Eoption.ESome arg -> arg in
  let more_values: integer array =
    match
      (Eoption.ESome
         (o_concat values
            ([|(integer_of_string "1"); (integer_of_string "2");
               (integer_of_string "3")|])))
    with
    | Eoption.ENone _ -> (raise
        (Runtime_ocaml.Runtime.Error (NoValue, [{filename="examples/test/Tutorial_en.catala_en";
                                                 start_line=1035; start_column=10;
                                                 end_line=1035; end_column=21;
                                                 law_headings=["Lists";
                                                                "Catala values";
                                                                "The Catala language tutorial"]}])))
    | Eoption.ESome arg -> arg in
  let relative_values: decimal array =
    match
      (Eoption.ESome
         (o_map
            (fun (x: integer) ->
               o_div_int_int
                 {filename="examples/test/Tutorial_en.catala_en";
                  start_line=1053; start_column=12;
                  end_line=1053; end_column=17;
                  law_headings=["Lists"; "Catala values";
                                 "The Catala language tutorial"]} x total)
            values))
    with
    | Eoption.ENone _ -> (raise
        (Runtime_ocaml.Runtime.Error (NoValue, [{filename="examples/test/Tutorial_en.catala_en";
                                                 start_line=1039; start_column=10;
                                                 end_line=1039; end_column=25;
                                                 law_headings=["Lists";
                                                                "Catala values";
                                                                "The Catala language tutorial"]}])))
    | Eoption.ESome arg -> arg in
  let average: decimal =
    match
      (Eoption.ESome
         (o_div_int_int
            {filename="examples/test/Tutorial_en.catala_en";
             start_line=1049; start_column=15; end_line=1049; end_column=31;
             law_headings=["Lists"; "Catala values";
                            "The Catala language tutorial"]} total
            (o_length values)))
    with
    | Eoption.ENone _ -> (raise
        (Runtime_ocaml.Runtime.Error (NoValue, [{filename="examples/test/Tutorial_en.catala_en";
                                                 start_line=1037; start_column=10;
                                                 end_line=1037; end_column=17;
                                                 law_headings=["Lists";
                                                                "Catala values";
                                                                "The Catala language tutorial"]}])))
    | Eoption.ESome arg -> arg in
  {ListValues.more_values = more_values; ListValues.total = total;
     ListValues.average = average;
     ListValues.positive_values = positive_values;
     ListValues.relative_values = relative_values}

let use_of_tuple (use_of_tuple_in: UseOfTuple_in.t) : UseOfTuple.t =
  let money_and_date: (money * date) =
    match
      (Eoption.ESome
         ((money_of_cents_string "1200"), (date_of_numbers (2024) (1) (1))))
    with
    | Eoption.ENone _ -> (raise
        (Runtime_ocaml.Runtime.Error (NoValue, [{filename="examples/test/Tutorial_en.catala_en";
                                                 start_line=1070; start_column=12;
                                                 end_line=1070; end_column=26;
                                                 law_headings=["Tuples";
                                                                "Catala values";
                                                                "The Catala language tutorial"]}])))
    | Eoption.ESome arg -> arg in
  let when1: date =
    match (Eoption.ESome (let _, x = money_and_date in x))
    with
    | Eoption.ENone _ -> (raise
        (Runtime_ocaml.Runtime.Error (NoValue, [{filename="examples/test/Tutorial_en.catala_en";
                                                 start_line=1071; start_column=10;
                                                 end_line=1071; end_column=14;
                                                 law_headings=["Tuples";
                                                                "Catala values";
                                                                "The Catala language tutorial"]}])))
    | Eoption.ESome arg -> arg in
  {UseOfTuple.when1 = when1}

let apply_rates (apply_rates_in: ApplyRates_in.t) : ApplyRates.t =
  let values: money array = apply_rates_in.ApplyRates_in.values_in in
  let rates: decimal array = apply_rates_in.ApplyRates_in.rates_in in
  let result: money array =
    match
      (Eoption.ESome
         (o_map
            (fun (v_r: (money * decimal)) ->
               (let v : money = (let x, _ = v_r in x)
               in
               let r : decimal = (let _, x = v_r in x)
               in
               (o_mult_mon_rat v r)))
            (o_map2
               {filename="examples/test/Tutorial_en.catala_en";
                start_line=1093; start_column=11;
                end_line=1093; end_column=14;
                law_headings=["Tuples"; "Catala values";
                               "The Catala language tutorial"]}
               (fun (v: money) (r: decimal) -> (v, r)) values rates)))
    with
    | Eoption.ENone _ -> (raise
        (Runtime_ocaml.Runtime.Error (NoValue, [{filename="examples/test/Tutorial_en.catala_en";
                                                 start_line=1089; start_column=10;
                                                 end_line=1089; end_column=16;
                                                 law_headings=["Tuples";
                                                                "Catala values";
                                                                "The Catala language tutorial"]}])))
    | Eoption.ESome arg -> arg in
  {ApplyRates.result = result}

let workdays_per_week : integer =
  integer_of_string
  "5"

let round_up_100 : money -> money =
  fun (money_amount: money) ->
    o_mult_mon_rat
      (o_round_mon
         (o_add_mon_mon
            (o_div_mon_rat
               {filename="examples/test/Tutorial_en.catala_en";
                start_line=1146; start_column=30;
                end_line=1146; end_column=35;
                law_headings=["Defining a function with a single argument";
                               "Examples";
                               "Annex A: top-level value definitions"]}
               money_amount (decimal_of_string "100."))
            (money_of_cents_string "49"))) (decimal_of_string "100.")

let excess : money -> money -> money =
  fun (x: money) (y: money) ->
     if (o_gt_mon_mon x y) then (o_sub_mon_mon x y) else
      (money_of_cents_string "0")

let new_income_tax_computation_fixed (new_income_tax_computation_fixed_in: NewIncomeTaxComputationFixed_in.t) : NewIncomeTaxComputationFixed.t =
  let individual: Individual.t =
    new_income_tax_computation_fixed_in.NewIncomeTaxComputationFixed_in.individual_in
    in
  let income_tax: unit -> (money) Eoption.t =
    new_income_tax_computation_fixed_in.NewIncomeTaxComputationFixed_in.income_tax_in
    in
  let two_brackets: TwoBracketsTaxComputation.t =
    (let result : TwoBracketsTaxComputation.t =
       (two_brackets_tax_computation
          ({TwoBracketsTaxComputation_in.brackets_in =
              (match
                 (Eoption.ESome
                    ({TwoBrackets.breakpoint = (money_of_cents_string
                        "10000000");
                        TwoBrackets.rate1 = (decimal_of_string "0.2");
                        TwoBrackets.rate2 = (decimal_of_string "0.4")}))
               with
               | Eoption.ENone _ -> (raise
                   (Runtime_ocaml.Runtime.Error (NoValue, [{filename="examples/test/Tutorial_en.catala_en";
                                                            start_line=525; start_column=14;
                                                            end_line=525; end_column=35;
                                                            law_headings=
                                                            ["Fixing the computation";
                                                              "Defining exceptions to rules";
                                                              "The Catala language tutorial"]}])))
               | Eoption.ESome arg -> arg)}))
    in
    (let result1 : TwoBracketsTaxComputation.t =
       ({TwoBracketsTaxComputation.tax_formula =
           (fun (param0: money) ->
              (result.TwoBracketsTaxComputation.tax_formula) param0)})
    in
    ( if true then result1 else result1))) in
  let tax_formula: money -> money =
    fun (income: money) ->
      match
        (Eoption.ESome
           ((two_brackets.TwoBracketsTaxComputation.tax_formula) income))
      with
      | Eoption.ENone _ -> (raise
          (Runtime_ocaml.Runtime.Error (NoValue, [{filename="examples/test/Tutorial_en.catala_en";
                                                   start_line=516; start_column=10;
                                                   end_line=516; end_column=21;
                                                   law_headings=["Fixing the computation";
                                                                  "Defining exceptions to rules";
                                                                  "The Catala language tutorial"]}])))
      | Eoption.ESome arg -> arg in
  let income_tax1: money =
    match
      (match (income_tax ())
       with
       | Eoption.ENone _ ->
           (Eoption.ESome
              (match
                 (match
                    (match
                       ( if
                          (o_gte_int_int
                             (individual.Individual.number_of_children)
                             (integer_of_string "7")) then
                          (Eoption.ESome (money_of_cents_string "0")) else
                          (Eoption.ENone ()))
                     with
                     | Eoption.ENone _1 ->
                         ( if
                            (o_lte_mon_mon (individual.Individual.income)
                               (money_of_cents_string "1000000")) then
                            (Eoption.ESome (money_of_cents_string "0")) else
                            (Eoption.ENone ()))
                     | Eoption.ESome x -> (Eoption.ESome x))
                  with
                  | Eoption.ENone _1 ->
                      (Eoption.ESome
                         ((two_brackets.TwoBracketsTaxComputation.tax_formula)
                            (individual.Individual.income)))
                  | Eoption.ESome x -> (Eoption.ESome x))
               with
               | Eoption.ENone _1 -> (raise
                   (Runtime_ocaml.Runtime.Error (NoValue, [{filename="examples/test/Tutorial_en.catala_en";
                                                            start_line=517; start_column=18;
                                                            end_line=517; end_column=28;
                                                            law_headings=
                                                            ["Fixing the computation";
                                                              "Defining exceptions to rules";
                                                              "The Catala language tutorial"]}])))
               | Eoption.ESome arg -> arg))
       | Eoption.ESome x -> (Eoption.ESome x))
    with
    | Eoption.ENone _ -> (raise
        (Runtime_ocaml.Runtime.Error (NoValue, [{filename="examples/test/Tutorial_en.catala_en";
                                                 start_line=517; start_column=18;
                                                 end_line=517; end_column=28;
                                                 law_headings=["Fixing the computation";
                                                                "Defining exceptions to rules";
                                                                "The Catala language tutorial"]}])))
    | Eoption.ESome arg -> arg in
  {NewIncomeTaxComputationFixed.tax_formula = tax_formula;
     NewIncomeTaxComputationFixed.income_tax = income_tax1}

let new_income_tax_computation (new_income_tax_computation_in: NewIncomeTaxComputation_in.t) : NewIncomeTaxComputation.t =
  let individual: Individual.t =
    new_income_tax_computation_in.NewIncomeTaxComputation_in.individual_in in
  let two_brackets: TwoBracketsTaxComputation.t =
    (let result : TwoBracketsTaxComputation.t =
       (two_brackets_tax_computation
          ({TwoBracketsTaxComputation_in.brackets_in =
              (match
                 (Eoption.ESome
                    ({TwoBrackets.breakpoint = (money_of_cents_string
                        "10000000");
                        TwoBrackets.rate1 = (decimal_of_string "0.2");
                        TwoBrackets.rate2 = (decimal_of_string "0.4")}))
               with
               | Eoption.ENone _ -> (raise
                   (Runtime_ocaml.Runtime.Error (NoValue, [{filename="examples/test/Tutorial_en.catala_en";
                                                            start_line=353; start_column=14;
                                                            end_line=353; end_column=35;
                                                            law_headings=
                                                            ["Article 5";
                                                              "Scope inclusion";
                                                              "The Catala language tutorial"]}])))
               | Eoption.ESome arg -> arg)}))
    in
    (let result1 : TwoBracketsTaxComputation.t =
       ({TwoBracketsTaxComputation.tax_formula =
           (fun (param0: money) ->
              (result.TwoBracketsTaxComputation.tax_formula) param0)})
    in
    ( if true then result1 else result1))) in
  let income_tax: money =
    match
      (handle_exceptions
         [|{filename="examples/test/Tutorial_en.catala_en";
            start_line=346; start_column=10; end_line=346; end_column=20;
            law_headings=["Article 5"; "Scope inclusion";
                           "The Catala language tutorial"]}|]
         ([|(Eoption.ESome
               ((two_brackets.TwoBracketsTaxComputation.tax_formula)
                  (individual.Individual.income)));
            ( if
               (o_lte_mon_mon (individual.Individual.income)
                  (money_of_cents_string "1000000")) then
               (Eoption.ESome (money_of_cents_string "0")) else
               (Eoption.ENone ()))|]))
    with
    | Eoption.ENone _ -> (raise
        (Runtime_ocaml.Runtime.Error (NoValue, [{filename="examples/test/Tutorial_en.catala_en";
                                                 start_line=346; start_column=10;
                                                 end_line=346; end_column=20;
                                                 law_headings=["Article 5";
                                                                "Scope inclusion";
                                                                "The Catala language tutorial"]}])))
    | Eoption.ESome arg -> arg in
  {NewIncomeTaxComputation.income_tax = income_tax}

let include_in_gross_income (include_in_gross_income_in: IncludeInGrossIncome_in.t) : IncludeInGrossIncome.t =
  let fair_market_value: money =
    include_in_gross_income_in.IncludeInGrossIncome_in.fair_market_value_in in
  let amount_paid: money =
    include_in_gross_income_in.IncludeInGrossIncome_in.amount_paid_in in
  let amount_to_include: money =
    match (Eoption.ESome (excess fair_market_value amount_paid))
    with
    | Eoption.ENone _ -> (raise
        (Runtime_ocaml.Runtime.Error (NoValue, [{filename="examples/test/Tutorial_en.catala_en";
                                                 start_line=1178; start_column=10;
                                                 end_line=1178; end_column=27;
                                                 law_headings=["Functions with multiple parameters";
                                                                "Examples";
                                                                "Annex A: top-level value definitions"]}])))
    | Eoption.ESome arg -> arg in
  {IncludeInGrossIncome.amount_to_include = amount_to_include}

let basis_for_fine_determination (basis_for_fine_determination_in: BasisForFineDetermination_in.t) : BasisForFineDetermination.t =
  let individual: Individual.t =
    basis_for_fine_determination_in.BasisForFineDetermination_in.individual_in
    in
  let tax_computation: NewIncomeTaxComputationFixed.t =
    (let result : NewIncomeTaxComputationFixed.t =
       (new_income_tax_computation_fixed
          ({NewIncomeTaxComputationFixed_in.individual_in =
              (match (Eoption.ESome individual)
               with
               | Eoption.ENone _ -> (raise
                   (Runtime_ocaml.Runtime.Error (NoValue, [{filename="examples/test/Tutorial_en.catala_en";
                                                            start_line=749; start_column=14;
                                                            end_line=749; end_column=40;
                                                            law_headings=
                                                            ["Article 7";
                                                              "Context scope variables";
                                                              "The Catala language tutorial"]}])))
               | Eoption.ESome arg -> arg);
              NewIncomeTaxComputationFixed_in.income_tax_in =
                (fun (_: unit) ->
                    if
                     (o_lte_mon_mon (individual.Individual.income)
                        (money_of_cents_string "1000000")) then
                     (Eoption.ESome (money_of_cents_string "50000")) else
                     (Eoption.ENone ()))}))
    in
    (let result1 : NewIncomeTaxComputationFixed.t =
       ({NewIncomeTaxComputationFixed.tax_formula =
           (fun (param0: money) ->
              (result.NewIncomeTaxComputationFixed.tax_formula) param0);
           NewIncomeTaxComputationFixed.income_tax =
             (result.NewIncomeTaxComputationFixed.income_tax)})
    in
    ( if true then result1 else result1))) in
  let basis_for_fine: money =
    match
      (Eoption.ESome
         (tax_computation.NewIncomeTaxComputationFixed.income_tax))
    with
    | Eoption.ENone _ -> (raise
        (Runtime_ocaml.Runtime.Error (NoValue, [{filename="examples/test/Tutorial_en.catala_en";
                                                 start_line=745; start_column=10;
                                                 end_line=745; end_column=24;
                                                 law_headings=["Article 7";
                                                                "Context scope variables";
                                                                "The Catala language tutorial"]}])))
    | Eoption.ESome arg -> arg in
  {BasisForFineDetermination.basis_for_fine = basis_for_fine}

let test4bis (test4bis_in: Test4bis_in.t) : Test4bis.t =
  let tax_computation: NewIncomeTaxComputationFixed.t =
    (let result : NewIncomeTaxComputationFixed.t =
       (new_income_tax_computation_fixed
          ({NewIncomeTaxComputationFixed_in.individual_in =
              (match
                 (Eoption.ESome
                    ({Individual.income = (money_of_cents_string "700000");
                        Individual.number_of_children = (integer_of_string
                          "7")}))
               with
               | Eoption.ENone _ -> (raise
                   (Runtime_ocaml.Runtime.Error (NoValue, [{filename="examples/test/Tutorial_en.catala_en";
                                                            start_line=697; start_column=14;
                                                            end_line=697; end_column=40;
                                                            law_headings=
                                                            ["Implicit scope structures, and output scopes";
                                                              "Defining exceptions to rules";
                                                              "The Catala language tutorial"]}])))
               | Eoption.ESome arg -> arg);
              NewIncomeTaxComputationFixed_in.income_tax_in =
                (fun (_: unit) -> Eoption.ENone ())}))
    in
    (let result1 : NewIncomeTaxComputationFixed.t =
       ({NewIncomeTaxComputationFixed.tax_formula =
           (fun (param0: money) ->
              (result.NewIncomeTaxComputationFixed.tax_formula) param0);
           NewIncomeTaxComputationFixed.income_tax =
             (result.NewIncomeTaxComputationFixed.income_tax)})
    in
    ( if true then result1 else result1))) in
  {Test4bis.tax_computation = tax_computation}

let test5 (test5_in: Test5_in.t) : Test5.t =
  let individual: Individual.t =
    match
      (Eoption.ESome
         ({Individual.income = (money_of_cents_string "700000");
             Individual.number_of_children = (integer_of_string "7")}))
    with
    | Eoption.ENone _ -> (raise
        (Runtime_ocaml.Runtime.Error (NoValue, [{filename="examples/test/Tutorial_en.catala_en";
                                                 start_line=640; start_column=12;
                                                 end_line=640; end_column=22;
                                                 law_headings=["Direct scope calls";
                                                                "Defining exceptions to rules";
                                                                "The Catala language tutorial"]}])))
    | Eoption.ESome arg -> arg in
  let normal_income_tax_computation_applies: bool =
    match (Eoption.ESome true)
    with
    | Eoption.ENone _ -> (raise
        (Runtime_ocaml.Runtime.Error (NoValue, [{filename="examples/test/Tutorial_en.catala_en";
                                                 start_line=641; start_column=12;
                                                 end_line=641; end_column=49;
                                                 law_headings=["Direct scope calls";
                                                                "Defining exceptions to rules";
                                                                "The Catala language tutorial"]}])))
    | Eoption.ESome arg -> arg in
  let income_tax: money =
    match
      (Eoption.ESome
         ( if normal_income_tax_computation_applies then
            (let result_of_tax_computation : NewIncomeTaxComputationFixed.t =
               (let result : NewIncomeTaxComputationFixed.t =
                  (new_income_tax_computation_fixed
                     ({NewIncomeTaxComputationFixed_in.individual_in =
                         individual;
                         NewIncomeTaxComputationFixed_in.income_tax_in =
                           (fun (_: unit) -> Eoption.ENone ())}))
               in
               (let result1 : NewIncomeTaxComputationFixed.t =
                  ({NewIncomeTaxComputationFixed.tax_formula =
                      (fun (param0: money) ->
                         (result.NewIncomeTaxComputationFixed.tax_formula)
                           param0);
                      NewIncomeTaxComputationFixed.income_tax =
                        (result.NewIncomeTaxComputationFixed.income_tax)})
               in
               ( if true then result1 else result1)))
              in
              (result_of_tax_computation.NewIncomeTaxComputationFixed.income_tax))
            else (money_of_cents_string "0")))
    with
    | Eoption.ENone _ -> (raise
        (Runtime_ocaml.Runtime.Error (NoValue, [{filename="examples/test/Tutorial_en.catala_en";
                                                 start_line=642; start_column=10;
                                                 end_line=642; end_column=20;
                                                 law_headings=["Direct scope calls";
                                                                "Defining exceptions to rules";
                                                                "The Catala language tutorial"]}])))
    | Eoption.ESome arg -> arg in
  {Test5.income_tax = income_tax}

let test6 (test4_in: Test4_in.t) : Test4.t =
  let tax_computation: NewIncomeTaxComputationFixed.t =
    (let result : NewIncomeTaxComputationFixed.t =
       (new_income_tax_computation_fixed
          ({NewIncomeTaxComputationFixed_in.individual_in =
              (match
                 (Eoption.ESome
                    ({Individual.income = (money_of_cents_string "700000");
                        Individual.number_of_children = (integer_of_string
                          "7")}))
               with
               | Eoption.ENone _ -> (raise
                   (Runtime_ocaml.Runtime.Error (NoValue, [{filename="examples/test/Tutorial_en.catala_en";
                                                            start_line=609; start_column=14;
                                                            end_line=609; end_column=40;
                                                            law_headings=
                                                            ["Article 6 bis";
                                                              "Cumulative exceptions";
                                                              "Defining exceptions to rules";
                                                              "The Catala language tutorial"]}])))
               | Eoption.ESome arg -> arg);
              NewIncomeTaxComputationFixed_in.income_tax_in =
                (fun (_: unit) -> Eoption.ENone ())}))
    in
    (let result1 : NewIncomeTaxComputationFixed.t =
       ({NewIncomeTaxComputationFixed.tax_formula =
           (fun (param0: money) ->
              (result.NewIncomeTaxComputationFixed.tax_formula) param0);
           NewIncomeTaxComputationFixed.income_tax =
             (result.NewIncomeTaxComputationFixed.income_tax)})
    in
    ( if true then result1 else result1))) in
  let income_tax: money =
    match
      (Eoption.ESome
         (tax_computation.NewIncomeTaxComputationFixed.income_tax))
    with
    | Eoption.ENone _ -> (raise
        (Runtime_ocaml.Runtime.Error (NoValue, [{filename="examples/test/Tutorial_en.catala_en";
                                                 start_line=606; start_column=10;
                                                 end_line=606; end_column=20;
                                                 law_headings=["Article 6 bis";
                                                                "Cumulative exceptions";
                                                                "Defining exceptions to rules";
                                                                "The Catala language tutorial"]}])))
    | Eoption.ESome arg -> arg in
  let _: unit =
    if (o_eq income_tax (money_of_cents_string "0")) then () else
      raise (Error (AssertionFailed, [{filename="examples/test/Tutorial_en.catala_en";
                                       start_line=614; start_column=13;
                                       end_line=614; end_column=28;
                                       law_headings=["Article 6 bis";
                                                      "Cumulative exceptions";
                                                      "Defining exceptions to rules";
                                                      "The Catala language tutorial"]}]))
    in
  {Test4.income_tax = income_tax}

let test7 (test3_in: Test3_in.t) : Test3.t =
  let tax_computation: NewIncomeTaxComputationFixed.t =
    (let result : NewIncomeTaxComputationFixed.t =
       (new_income_tax_computation_fixed
          ({NewIncomeTaxComputationFixed_in.individual_in =
              (match
                 (Eoption.ESome
                    ({Individual.income = (money_of_cents_string "400000");
                        Individual.number_of_children = (integer_of_string
                          "0")}))
               with
               | Eoption.ENone _ -> (raise
                   (Runtime_ocaml.Runtime.Error (NoValue, [{filename="examples/test/Tutorial_en.catala_en";
                                                            start_line=557; start_column=14;
                                                            end_line=557; end_column=40;
                                                            law_headings=
                                                            ["Fixing the computation";
                                                              "Defining exceptions to rules";
                                                              "The Catala language tutorial"]}])))
               | Eoption.ESome arg -> arg);
              NewIncomeTaxComputationFixed_in.income_tax_in =
                (fun (_: unit) -> Eoption.ENone ())}))
    in
    (let result1 : NewIncomeTaxComputationFixed.t =
       ({NewIncomeTaxComputationFixed.tax_formula =
           (fun (param0: money) ->
              (result.NewIncomeTaxComputationFixed.tax_formula) param0);
           NewIncomeTaxComputationFixed.income_tax =
             (result.NewIncomeTaxComputationFixed.income_tax)})
    in
    ( if true then result1 else result1))) in
  let income_tax: money =
    match
      (Eoption.ESome
         (tax_computation.NewIncomeTaxComputationFixed.income_tax))
    with
    | Eoption.ENone _ -> (raise
        (Runtime_ocaml.Runtime.Error (NoValue, [{filename="examples/test/Tutorial_en.catala_en";
                                                 start_line=554; start_column=10;
                                                 end_line=554; end_column=20;
                                                 law_headings=["Fixing the computation";
                                                                "Defining exceptions to rules";
                                                                "The Catala language tutorial"]}])))
    | Eoption.ESome arg -> arg in
  let _: unit =
    if (o_eq income_tax (money_of_cents_string "0")) then () else
      raise (Error (AssertionFailed, [{filename="examples/test/Tutorial_en.catala_en";
                                       start_line=562; start_column=13;
                                       end_line=562; end_column=28;
                                       law_headings=["Fixing the computation";
                                                      "Defining exceptions to rules";
                                                      "The Catala language tutorial"]}]))
    in
  {Test3.income_tax = income_tax}

let test8 (test2_in: Test2_in.t) : Test2.t =
  let tax_computation: NewIncomeTaxComputation.t =
    (let result : NewIncomeTaxComputation.t =
       (new_income_tax_computation
          ({NewIncomeTaxComputation_in.individual_in =
              (match
                 (Eoption.ESome
                    ({Individual.income = (money_of_cents_string "400000");
                        Individual.number_of_children = (integer_of_string
                          "0")}))
               with
               | Eoption.ENone _ -> (raise
                   (Runtime_ocaml.Runtime.Error (NoValue, [{filename="examples/test/Tutorial_en.catala_en";
                                                            start_line=463; start_column=14;
                                                            end_line=463; end_column=40;
                                                            law_headings=
                                                            ["Testing NewIncomeTaxComputation";
                                                              "Testing Catala programs";
                                                              "The Catala language tutorial"]}])))
               | Eoption.ESome arg -> arg)}))
    in
    (let result1 : NewIncomeTaxComputation.t =
       ({NewIncomeTaxComputation.income_tax =
           (result.NewIncomeTaxComputation.income_tax)})
    in
    ( if true then result1 else result1))) in
  let income_tax: money =
    match
      (Eoption.ESome (tax_computation.NewIncomeTaxComputation.income_tax))
    with
    | Eoption.ENone _ -> (raise
        (Runtime_ocaml.Runtime.Error (NoValue, [{filename="examples/test/Tutorial_en.catala_en";
                                                 start_line=460; start_column=10;
                                                 end_line=460; end_column=20;
                                                 law_headings=["Testing NewIncomeTaxComputation";
                                                                "Testing Catala programs";
                                                                "The Catala language tutorial"]}])))
    | Eoption.ESome arg -> arg in
  let _: unit =
    if (o_eq income_tax (money_of_cents_string "0")) then () else
      raise (Error (AssertionFailed, [{filename="examples/test/Tutorial_en.catala_en";
                                       start_line=469; start_column=13;
                                       end_line=469; end_column=28;
                                       law_headings=["Testing NewIncomeTaxComputation";
                                                      "Testing Catala programs";
                                                      "The Catala language tutorial"]}]))
    in
  {Test2.income_tax = income_tax}

let test9 (test1_in: Test1_in.t) : Test1.t =
  let tax_computation: NewIncomeTaxComputation.t =
    (let result : NewIncomeTaxComputation.t =
       (new_income_tax_computation
          ({NewIncomeTaxComputation_in.individual_in =
              (match
                 (Eoption.ESome
                    ({Individual.income = (money_of_cents_string "23000000");
                        Individual.number_of_children = (integer_of_string
                          "0")}))
               with
               | Eoption.ENone _ -> (raise
                   (Runtime_ocaml.Runtime.Error (NoValue, [{filename="examples/test/Tutorial_en.catala_en";
                                                            start_line=424; start_column=5;
                                                            end_line=424; end_column=31;
                                                            law_headings=
                                                            ["Testing NewIncomeTaxComputation";
                                                              "Testing Catala programs";
                                                              "The Catala language tutorial"]}])))
               | Eoption.ESome arg -> arg)}))
    in
    (let result1 : NewIncomeTaxComputation.t =
       ({NewIncomeTaxComputation.income_tax =
           (result.NewIncomeTaxComputation.income_tax)})
    in
    ( if true then result1 else result1))) in
  let income_tax: money =
    match
      (Eoption.ESome (tax_computation.NewIncomeTaxComputation.income_tax))
    with
    | Eoption.ENone _ -> (raise
        (Runtime_ocaml.Runtime.Error (NoValue, [{filename="examples/test/Tutorial_en.catala_en";
                                                 start_line=416; start_column=10;
                                                 end_line=416; end_column=20;
                                                 law_headings=["Testing NewIncomeTaxComputation";
                                                                "Testing Catala programs";
                                                                "The Catala language tutorial"]}])))
    | Eoption.ESome arg -> arg in
  let _: unit =
    if (o_eq income_tax (money_of_cents_string "7200000")) then () else
      raise (Error (AssertionFailed, [{filename="examples/test/Tutorial_en.catala_en";
                                       start_line=438; start_column=13;
                                       end_line=438; end_column=33;
                                       law_headings=["Testing NewIncomeTaxComputation";
                                                      "Testing Catala programs";
                                                      "The Catala language tutorial"]}]))
    in
  {Test1.income_tax = income_tax}

let () =
  Runtime_ocaml.Runtime.register_module "Tutorial_en"
    [ "AmbiguousDate", Obj.repr ambiguous_date;
      "AmbiguousDate2", Obj.repr ambiguous_date2;
      "AmbiguousDate3", Obj.repr ambiguous_date3;
      "ApplyRates", Obj.repr apply_rates;
      "BasisForFineDetermination", Obj.repr basis_for_fine_determination;
      "BooleanValues", Obj.repr boolean_values;
      "Child", Obj.repr child;
      "DateValues", Obj.repr date_values;
      "DecimalValues", Obj.repr decimal_values;
      "IncludeInGrossIncome", Obj.repr include_in_gross_income;
      "IncomeTaxComputation", Obj.repr income_tax_computation;
      "IntegerValues", Obj.repr integer_values;
      "ListValues", Obj.repr list_values;
      "MoneyValues", Obj.repr money_values;
      "NewIncomeTaxComputation", Obj.repr new_income_tax_computation;
      "NewIncomeTaxComputationFixed",
        Obj.repr new_income_tax_computation_fixed;
      "Test1", Obj.repr test9;
      "Test2", Obj.repr test8;
      "Test3", Obj.repr test7;
      "Test4", Obj.repr test6;
      "Test4bis", Obj.repr test4bis;
      "Test5", Obj.repr test5;
      "TwoBracketsTaxComputation", Obj.repr two_brackets_tax_computation;
      "UseOfTuple", Obj.repr use_of_tuple;
      "WealthTax", Obj.repr wealth_tax;
      "excess", Obj.repr excess;
      "round_up_100", Obj.repr round_up_100;
      "workdays_per_week", Obj.repr workdays_per_week ]
    "CM0|2ddc3936|3353d0d2|20081c3c"
